apply plugin: 'application'

dependencies {
    compile project(':core')

    runtime('org.slf4j:slf4j-simple:1.7.25')

    testCompile('junit:junit:4.12')
    testCompile('org.hamcrest:hamcrest-junit:2.0.0.0')

    testRuntime('org.jmockit:jmockit-coverage:1.23')
    testRuntime('org.slf4j:slf4j-simple:1.7.25')
}

mainClassName = 'com.moneydance.modules.features.importlist.ConsoleHelper'

test {
    doFirst {
        String jMockit = project.configurations.testRuntime.find {
            it.name.startsWith("jmockit-coverage")
        }
        jvmArgs "-javaagent:${jMockit}"
        systemProperty 'coverage-srcDirs', project(':core').projectDir
        systemProperty 'coverage-classes', 'com.moneydance.modules.features.importlist.*'
        systemProperty 'coverage-excludes', '.*AllTests|.*Stub.*|.*Mock.*|.*ConsoleHelper.*|.*Test'
        systemProperty 'coverage-metrics', 'all'
        systemProperty 'coverage-outputDir', "${project.docsDir}/coverage-report"
    }
    include 'com/moneydance/modules/features/importlist/AllTests.*'
}

task genKeys(type: JavaExec) {
    description 'Generates a passphrase-protected key pair.'
    standardInput = System.in
    classpath = files("$rootDir/lib/extadmin-4.0.jar", "$rootDir/lib/moneydance.jar")
    main = 'com.moneydance.admin.KeyAdmin'
    args 'genkey', privkeyfile, pubkeyfile
}

task sign(type: JavaExec) {
    description 'Signs an MXT file with a private key that must already exist.'
    onlyIf {
        new File(privkeyfile as String).exists()
    }
    standardInput = System.in
    classpath = files("$rootDir/lib/extadmin-4.0.jar", "$rootDir/lib/moneydance.jar")
    main = 'com.moneydance.admin.KeyAdmin'
    args 'signextjar', privkeyfile, privkeyid, rootProject.name, mxtfile
}

sign.doLast {
    new File("$projectDir/s-importlist.mxt").renameTo mxtfile as String
}
