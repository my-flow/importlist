import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat

import org.apache.commons.configuration2.FileBasedConfiguration
import org.apache.commons.configuration2.PropertiesConfiguration
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-apt-plugin:0.18'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath 'org.apache.commons:commons-configuration2:2.3'
        classpath 'net.sf.proguard:proguard-gradle:6.0.2'
        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'net.ltgt.apt'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'idea'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'me.tatarka.retrolambda'
    apply plugin: 'org.sonarqube'


    sourceCompatibility = 1.8

    ext {
        privkeyid = '99'
        privkeyfile = "$rootDir/config/priv_key"
        pubkeyfile = "$rootDir/config/pub_key"
        mxtfile = "${project.distsDir}/${rootProject.name}-${project.name}-v${getConfigValueForKey("module_build")}.mxt"
    }

    repositories {
        mavenCentral()
        flatDir dirs: "$rootDir/lib"
    }

    jar {
        baseName rootProject.name
        manifest {
            attributes ((java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE.toString()): getConfigValueForKey("module_name"),
                    (java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION.toString()): getConfigValueForKey("module_build"),
                    (java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR.toString()): getConfigValueForKey("vendor"),
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': getCurrentTimestamp(),
                    'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')')

        }
    }

    shadowJar {
        baseName rootProject.name
        from 'NOTICE'
        from 'LICENSE'
        exclude 'META-INF/**/*'

        dependencies {
            include project(':core')
            include dependency('javax.inject:javax.inject:1')
            include dependency('com.google.dagger:dagger:2.4')
            include dependency('net.sourceforge.streamsupport:streamsupport:1.7.0')
            include dependency('org.apache.commons:commons-configuration2:2.3')
            include dependency('org.apache.commons:commons-lang3:3.7')
            include dependency('org.apache.commons:commons-text:1.3')
            include dependency('commons-io:commons-io:2.6')
            include dependency('org.slf4j:slf4j-api:1.7.25')
            include dependency('org.slf4j:slf4j-nop:1.7.25')
        }

        relocate 'dagger', 'com.moneydance.modules.features.importlist.dagger'
        relocate 'java8', 'com.moneydance.modules.features.importlist.java8'
        relocate 'javax.inject', 'com.moneydance.modules.features.importlist.javax.inject'
        relocate 'org.apache.commons.io', 'com.moneydance.modules.features.importlist.org.apache.commons.io'
        relocate 'org.apache.commons.lang3', 'com.moneydance.modules.features.importlist.org.apache.commons.lang3'
        relocate 'org.apache.commons.text', 'com.moneydance.modules.features.importlist.org.apache.commons.text'
        relocate 'org.apache.commons.configuration2', 'com.moneydance.modules.features.importlist.org.apache.commons.configuration2'
    }

    task proguard(type: ProGuardTask, dependsOn: 'shadowJar') {
        injars  shadowJar.archivePath
        outjars "${project.distsDir}/proguard-${rootProject.name}.jar"
        configuration 'config/proguard.cfg'
    }

    proguard.doLast {
        new File("${project.distsDir}/proguard-${rootProject.name}.jar").renameTo mxtfile as String
    }

    checkstyle {
        toolVersion '8.14';
    }

    pmd {
        toolVersion = "6.11.0"
        ruleSets = []
        ruleSetFiles = files("$rootDir/config/pmd-ruleSet.xml")
    }

    findbugs {
        toolVersion = "3.0.1"
        effort = "max"
        reportLevel = "medium"
        excludeFilter file("$rootDir/config/findbugs-exclude.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    sonarqube {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization", "${rootProject.name}"
        }
    }
}

String getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
    return df.format(today)
}

String getConfigValueForKey(String key) {
    file("${project(':core').projectDir}/src/main/resources/com/moneydance/modules/features/importlist/meta_info.dict").withInputStream {
        final FileBasedConfiguration config = new PropertiesConfiguration();
        config.read(new InputStreamReader(it, StandardCharsets.UTF_8))
        return config.getString("\"" + key + "\"").replaceAll("^\"|\"\$", "");
    }
}
