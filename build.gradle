import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat

import org.apache.commons.configuration2.FileBasedConfiguration
import org.apache.commons.configuration2.PropertiesConfiguration
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath 'org.apache.commons:commons-configuration2:2.3'
        classpath 'com.guardsquare:proguard-gradle:7.3.2'
        classpath 'com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.13'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.5.0.2730'
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'idea'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    tasks.withType(JavaCompile) {
        options.release = 8
    }

    ext {
        privkeyid = '99'
        privkeyfile = "$rootDir/config/priv_key"
        pubkeyfile = "$rootDir/config/pub_key"
        mxtfile = "${project.buildDir}/${project.distsDirName}/${rootProject.name}-${project.name}-v${getConfigValueForKey("module_build")}.mxt"
    }

    repositories {
        mavenCentral()
        flatDir dirs: "$rootDir/lib"
    }

    jar {
        archiveBaseName.set(rootProject.name)
        manifest {
            attributes ((java.util.jar.Attributes.Name.IMPLEMENTATION_TITLE.toString()): getConfigValueForKey("module_name"),
                    (java.util.jar.Attributes.Name.IMPLEMENTATION_VERSION.toString()): getConfigValueForKey("module_build"),
                    (java.util.jar.Attributes.Name.IMPLEMENTATION_VENDOR.toString()): getConfigValueForKey("vendor"),
                    'Built-By': System.getProperty('user.name'),
                    'Built-Date': getCurrentTimestamp(),
                    'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')')

        }
    }

    shadowJar {
        archiveBaseName.set(rootProject.name)
        from 'NOTICE'
        from 'LICENSE'
        exclude 'META-INF/**/*'

        dependencies {
            include project(':core')
            include dependency('javax.inject:javax.inject:1')
            include dependency('com.google.dagger:dagger:2.44.2')
            include dependency('org.apache.commons:commons-configuration2:2.3')
            include dependency('org.apache.commons:commons-lang3:3.12.0')
            include dependency('org.apache.commons:commons-text:1.10.0')
            include dependency('commons-io:commons-io:2.11.0')
            include dependency('org.slf4j:slf4j-api:2.0.7')
            include dependency('org.slf4j:slf4j-nop:2.0.6')
        }

        relocate 'dagger', 'com.moneydance.modules.features.importlist.dagger'
        relocate 'javax.inject', 'com.moneydance.modules.features.importlist.javax.inject'
        relocate 'org.apache.commons.io', 'com.moneydance.modules.features.importlist.org.apache.commons.io'
        relocate 'org.apache.commons.lang3', 'com.moneydance.modules.features.importlist.org.apache.commons.lang3'
        relocate 'org.apache.commons.text', 'com.moneydance.modules.features.importlist.org.apache.commons.text'
        relocate 'org.apache.commons.configuration2', 'com.moneydance.modules.features.importlist.org.apache.commons.configuration2'
    }

    task proguard(type: ProGuardTask, dependsOn: 'shadowJar') {
        injars  shadowJar.archivePath
        outjars "${project.buildDir}/${project.distsDirName}/proguard-${rootProject.name}.jar"
        configuration 'config/proguard.cfg'
    }

    proguard.doLast {
        new File("${project.buildDir}/${project.distsDirName}/proguard-${rootProject.name}.jar").renameTo mxtfile as String
    }

    checkstyle {
        toolVersion '10.12.2';
    }

    pmd {
        toolVersion = "6.53.0"
        ruleSets = []
        ruleSetFiles = files("$rootDir/config/pmd-ruleSet.xml")
    }

    spotbugs {
        toolVersion = "4.7.3"
        effort = "max"
        reportLevel = "medium"
        excludeFilter = file("$rootDir/config/spotbugs-exclude.xml")
    }

    spotbugsMain {
        reports {
            html {
                required = true
            }
        }
    }

    jacoco {
        toolVersion = "0.8.10"
    }

    sonar {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization", "${rootProject.name}"
        }
    }
}

String getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
    return df.format(today)
}

String getConfigValueForKey(String key) {
    file("${project(':core').projectDir}/src/main/resources/com/moneydance/modules/features/importlist/meta_info.dict").withInputStream {
        final FileBasedConfiguration config = new PropertiesConfiguration();
        config.read(new InputStreamReader(it, StandardCharsets.UTF_8))
        return config.getString("\"" + key + "\"").replaceAll("^\"|\"\$", "");
    }
}