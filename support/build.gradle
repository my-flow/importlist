apply plugin: 'application'

dependencies {
    compile project(':core')

    runtime('org.slf4j:slf4j-simple:1.7.25')
    runtime('org.syncloud:dropbox-client:1.5.3');

    testCompile('junit:junit:4.12')
    testCompile('org.hamcrest:hamcrest-junit:2.0.0.0')

    testRuntime('org.slf4j:slf4j-simple:1.7.25')
}

mainClassName = 'com.moneydance.modules.features.importlist.ConsoleHelper'

test {
    jacocoTestReport {
        sourceDirectories = files(project(':core').sourceSets.main.allSource.srcDirs)
        classDirectories =  files(project(':core').sourceSets.main.output)

        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        include: 'com/moneydance/modules/features/importlist/**',
                        exclude: '**/ConsoleHelper*')
            })
        }
    }
}

task genKeys(type: JavaExec) {
    description 'Generates a passphrase-protected key pair.'
    standardInput = System.in
    classpath = files("$rootDir/lib/extadmin-4.0.jar", "$rootDir/lib/moneydance.jar")
    main = 'com.moneydance.admin.KeyAdmin'
    args 'genkey', privkeyfile, pubkeyfile
}

task sign(type: JavaExec) {
    description 'Signs an MXT file with a private key that must already exist.'
    onlyIf {
        new File(privkeyfile as String).exists()
    }
    standardInput = System.in
    classpath = files("$rootDir/lib/extadmin-4.0.jar", "$rootDir/lib/moneydance.jar")
    main = 'com.moneydance.admin.KeyAdmin'
    args 'signextjar', privkeyfile, privkeyid, rootProject.name, mxtfile
}

sign.doLast {
    new File("$projectDir/s-importlist.mxt").renameTo mxtfile as String
}
